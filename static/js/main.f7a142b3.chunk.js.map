{"version":3,"sources":["context/GameContext.js","componentes/CardComponent.js","componentes/cards.js","componentes/players.js","pages/Lobby.js","pages/Home.js","pages/Chat.js","pages/Welcome.js","pages/Rules.js","pages/End.js","serviceWorker.js","index.js"],"names":["gameContext","React","createContext","CardComponent","card","isFaceUp","player","isKnock","pile","history","useHistory","useState","isFaceUpState","setIsFaceUpSate","useContext","GameContext","discardPile","setDiscardPile","deck","setDeck","gameState","setGameState","currentCard","setCurrentCard","players","roundsPlayed","setPlayers","setRoundsPlayed","useEffect","checkGinPlayer","calcDeadwood","score","scores","push","alert","console","log","name","className","onClick","e","preventDefault","hand","tmpDiscard","shift","tmpPile","unshift","splice","indexOf","value","faceUpClicked","length","tmpDeck","forEach","c","index","possibleMelds","map","meld","deadwoodCards","suit","theirDeadwood","Math","abs","faceDownClicked","style","backgroundImage","process","toUpperCase","mapToPNG","Card","this","suits","HEARTS","CLUBS","SPADES","DIAMONDS","Player","prolificID","bestMelds","deadwood","bestMeld","otherCards","melds","cardsInMeld","cardContested","meldValue","meld2","index2","melds2","cardIndex","includes","card2","cardIndex2","highestEffeciency","highestEfficiencyIndex","cardCounts","contestedCards","sum","isInArray","obj","count","intersection","filter","efficiency","max","sortedHand","hearts","diamonds","clubs","spades","sort","card1","i","tmpMeld","j","cards","nextCard","highestValueMeld","possibleMeldsTmp","checkHandForSets","filterMelds","getMelds","isCardInMeld","a1","a2","a","diff","k","discardLength","deckLength","previousHandState","discardCard","deckCard","tmpPile2","highestValCard","cardToDiscardIndex","cardToDiscard","flat","highestVal","Lobby","playerName","setPlayerName","isFindingGame","setIsFindingGame","setProlificID","onSubmit","sleepInterval","floor","random","setTimeout","findGame","htmlFor","type","id","placeholder","onChange","target","Home","hasDealt","setHasDealt","_setGameState","prevGameState","setPrevGameState","state","dealBtnRef","useRef","undefined","Object","keys","newCard","generateDeck","current","click","opponentTurn","Provider","userPlayer","duplicates","otherTmpDeck","deal","ref","key","gameStateMap","flexGrow","Message","sender","text","timestamp","Date","now","Chat","messages","setMessages","currentMessage","setCurrentMessage","userMessagesCount","setUserMessagesCount","setChatLogPhpLink","context","fetch","mode","then","res","json","data","chatLogPHPLink","sendMessage","message","messageText","currentMessages","document","getElementById","innerHTML","disabled","r","roundWinner","gameWinner","winningText","helpterText","messageChange","onKeyDown","keyCode","Welcome","Rules","End","surveyLink","setSurveyLink","survey","href","Boolean","window","location","hostname","match","App","basename","exact","path","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f7a142b3.chunk.js","sourcesContent":["import React from 'react'\n\nconst gameContext = React.createContext({})\n\nexport default gameContext","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport GameContext from '../context/GameContext'\nimport '../style/card.css'\n\nconst CardComponent = ({card, isFaceUp, player, isKnock=false, pile}) => {\n    const history = useHistory()\n\n    const [isFaceUpState, setIsFaceUpSate] = useState(false)\n    const {discardPile, setDiscardPile, deck, setDeck, gameState, setGameState, currentCard, setCurrentCard, players, setPlayers, roundsPlayed, setRoundsPlayed} = useContext(GameContext)\n \n    useEffect(() => {\n        setIsFaceUpSate(isFaceUp)\n    }, [])\n\n    const mapToPNG = card => {\n        let value\n        switch (card.value) {\n            case 1:\n                value = 'A'\n                break;\n\n            case 11:\n                value = 'J'\n                break;\n\n            case 12:\n                value = 'Q'\n                break;\n\n            case 13:\n                value = 'K'\n                break;\n        \n            default:\n                value = card.value\n                break;\n        }\n        return `${value}${card.suit[0].toUpperCase()}.png`\n    }\n\n    const checkGinPlayer = () => {\n        if (players[0].calcDeadwood() == 0) {\n            players[0].score += 25 + players[1].calcDeadwood()\n            players[0].scores.push(players[0].score)\n            \n            //console.log('Player 1 score', players[0].score)\n            //console.log('Player 2 score', players[1].score)\n\n            if (players[0].score >= 100) {\n                alert(`You won by going Gin`)\n                history.push('/')\n            } else {\n                alert(`You went Gin and gained ${25+players[1].calcDeadwood()} points`)\n                console.log('setRoundsPlayed', setRoundsPlayed)\n                setRoundsPlayed(roundsPlayed + 1)\n                history.push('/chat')\n                //console.log('chat')\n            }\n        }\n\n        if (players[1].calcDeadwood() == 0) {\n            //console.log('player 2 score before calc', players[1].score)\n            //console.log('player 1 deadwood', players[0].calcDeadwood())\n            players[1].score += 25 + players[0].calcDeadwood()\n            players[1].scores.push(players[1].score)\n\n            //console.log('Player 1 score', players[0].score)\n            //console.log('Player 2 score', players[1].score)\n\n            if (players[1].score >= 100) {\n                alert(`${players[1].name} went Gin and won`)\n                history.push('/')\n            } else {\n                alert(`${players[1].name} went Gin and gained ${25+players[0].calcDeadwood()} points`)\n                console.log('setRoundsPlayed', setRoundsPlayed)\n                setRoundsPlayed(roundsPlayed + 1)\n                history.push('/chat')\n            }\n        }\n    }    \n\n    const faceUpClicked = e => {\n        checkGinPlayer()\n\n        if (player==null && gameState=='draw') {\n            e.preventDefault()\n            players[0].hand.push(card)\n            let tmpDiscard = [...discardPile]\n            // tmpPile.splice(tmpPile.indexOf(card), 1)\n            tmpDiscard.shift()\n            setDiscardPile(tmpDiscard)\n            players[0].calcDeadwood()\n            // checkGinPlayer()\n            setGameState('discard')\n        }\n\n        if (player===players[0] && gameState=='discard') {\n            e.preventDefault()\n\n            if (players[0].calcDeadwood() > 10) {\n                let tmpPile = [...discardPile]\n                tmpPile.unshift(card)\n                setDiscardPile(tmpPile)\n                players[0].hand.splice(players[0].hand.indexOf(card), 1)\n                // checkGinPlayer()\n                setGameState('opponent')\n            } else if (players[0].calcDeadwood() - (card.value<11 ? card.value : 10) === 0) {\n                let tmpPile = [...discardPile]\n                tmpPile.unshift(card)\n                setDiscardPile(tmpPile)\n                players[0].hand.splice(players[0].hand.indexOf(card), 1)\n                checkGinPlayer()\n            } else {\n                //highlight knock and discard piles\n                setGameState('knock-discard')\n                setCurrentCard(card)\n            }\n        }\n\n        if (pile.name=='discard' && gameState=='knock-discard') {\n                let tmpPile = [...discardPile]\n                //console.log('currentCard', currentCard)\n                tmpPile.unshift(currentCard)\n                setDiscardPile(tmpPile)\n                players[0].hand.splice(players[0].hand.indexOf(currentCard), 1)\n                // checkGinPlayer()\n                setGameState('opponent')\n        }\n    }\n\n    const faceDownClicked = e => {\n        checkGinPlayer()\n\n        if (player==null && gameState=='draw') {\n            e.preventDefault()\n            players[0].hand.push(card)\n            let tmpPile = [...deck]\n            tmpPile.splice(tmpPile.indexOf(card), 1)\n\n            if (deck.length < 1) {\n                let tmpDiscard = [...discardPile]\n                let tmpDeck = tmpDiscard\n                tmpDiscard = [tmpDiscard[0]]\n    \n                tmpDeck.forEach((c, index) => {\n                    if (c == tmpDiscard[0]) {\n                        tmpDeck.splice(index, 1)\n                    }\n                })\n                setDiscardPile(tmpDiscard)\n            }\n\n            setDeck(tmpPile)\n            // checkGinPlayer()\n            setGameState('discard')\n        }\n\n        if (isKnock && gameState=='knock-discard') {\n            players[1].calcDeadwood()\n            //console.log('deadwood before', players[1].deadwoodCards)\n            players[0].possibleMelds.map(meld=> {\n                if (meld.length == 3)\n                {\n                    players[1].deadwoodCards.map((card, index) => {\n                        if (meld[0].value == meld[1].value == card.value)\n                        {\n                            players[1].deadwoodCards.splice(index, 1)\n                            return\n                        }\n                        if ((meld[0].suit == meld[1].suit == card.suit) && ((card.value == meld[0].value-1) || (card.value == meld[2].value+1)))\n                        {\n                            players[1].deadwoodCards.splice(index, 1)\n                            return\n                        }\n                    })\n                }\n            })\n            //console.log('deadwood after', players[1].deadwoodCards)\n\n            let theirDeadwood = 0\n            players[1].deadwoodCards.map(card =>{\n                theirDeadwood += (card.value<11 ? card.value : 10)\n            })\n            players[0].score += theirDeadwood - players[0].calcDeadwood()\n            players[0].scores.push(players[0].score)\n\n            //console.log('their deadwood', theirDeadwood)\n            //console.log('our score', players[0].score)\n            if (players[0].score >= 100) {\n                alert(`You won by knocking!`)\n                history.push('/')\n            } else {\n                alert(`You knocked and ${theirDeadwood - players[0].calcDeadwood() > -1 ? 'gained' : 'lost'} ${Math.abs(theirDeadwood - players[0].calcDeadwood())} points`)\n                console.log('setRoundsPlayed', setRoundsPlayed)\n                setRoundsPlayed(roundsPlayed + 1)\n                history.push('/chat')\n                //console.log('chat')\n            }\n            // let oldDeadwoodCards= players[0].deadwoodCards\n            // let tmpPile = [...discardPile]\n            // tmpPile.unshift(card)\n            // setDiscardPile(tmpPile)\n            // players[0].hand.splice(players[0].hand.indexOf(card), 1)\n            // players[0].getMelds()\n            // let melds = players[0].bestMelds\n            // players[1].calcDeadwood()\n            // let player2Deadwood = players[1].deadwoodCards\n            // players[0].hand.push(player2Deadwood)\n            // players[0].getMelds()\n            // players[0].calcDeadwood()\n            // let newDeadwoodCards = players[0].deadwoodCards\n            // //console.log('oldDeadwoodCards', oldDeadwoodCards)\n            // //console.log('newDeadwoodCards', newDeadwoodCards)\n            // let trueDeadwoodCards = oldDeadwoodCards.filter(value => newDeadwoodCards.includes(value))\n            // //console.log('trueDeadwoodCards', trueDeadwoodCards)\n        }\n    }\n\n    return (\n        <>\n            {card && (\n                <div className=\"Card\"\n                    onClick={e => isFaceUpState ? faceUpClicked(e) : faceDownClicked(e)}\n                    style={{\n                        backgroundImage: isKnock ? `url('${process.env.PUBLIC_URL}/card-images/knock.png')` : (\n                            `url(\"${process.env.PUBLIC_URL + `/card-images/${isFaceUpState\n                                ? mapToPNG(card) \n                                : 'purple_back.png' }`}\")`\n                        )\n                    }}\n\n                />\n            )}\n        </>\n    )\n}\n\nexport default CardComponent","class Card {\n    suit = null\n    value = 0\n\n    constructor(suit, value) {\n        this.suit = suit\n        this.value = value\n    }\n}\n\nconst suits = {\n    HEARTS: 'hearts',\n    CLUBS: 'clubs',\n    SPADES: 'spades',\n    DIAMONDS: 'diamonds'\n}\n\nexport {Card, suits}","// import React, {useContext} from 'react'\n// import GameContext from '../context/GameContext'\n\nclass Player {\n    name = ''\n    score = 0\n    scores = [0]\n    hand = []\n    possibleMelds = []\n    bestMelds = []\n    discardPile = []\n    deck = []\n    deadwoodCards = []\n    deadwood = 0\n    prolificID = ''\n\n    constructor(name, prolificID=null) {\n        this.name = name\n        this.prolificID = prolificID\n    }\n\n    highestValueMeld() {\n        let bestMeldValue = 0\n        let bestMeld = null\n        let otherCards = []\n        this.possibleMelds.map((meld, index, melds) => {\n            let cardsInMeld = meld\n            let cardContested = false\n            let meldValue = 0\n            this.possibleMelds.map((meld2, index2, melds2) => {\n                if (index != index2)\n                {\n                    meld2.map((card, cardIndex) => {\n                        //if card is in cards in meld\n                        otherCards.push(card)\n                        if (cardsInMeld.includes(card)) {\n                            cardContested = true\n                        }\n                    })\n                }\n            })\n            meld.map((card2, cardIndex2) => {\n                if (!otherCards.includes(card2))\n                {\n                    meldValue+= card2.value < 11 ? card2.value : 10\n                }\n            })\n            if(!cardContested)\n            {\n                meldValue += 1000\n            }\n            if (meldValue >= bestMeldValue)\n            {\n                bestMeld = meld\n            }\n        })\n        return bestMeld\n    }\n\n    highestValueMeld2() {\n        let highestEffeciency = 0\n        let highestEfficiencyIndex = 0\n\n        let cardCounts = []\n        let contestedCards = []\n\n        this.possibleMelds.map((meld, index, melds) => {\n            let sum = 0\n            meld.map(card => {\n                \n                let isInArray = false\n                cardCounts.map(obj => {\n                    if (obj.card.value == card.value && obj.card.suit == card.suit) {\n                        isInArray = true\n                    }\n                })\n\n                if (isInArray) {\n                    cardCounts.map(obj => {\n                        if (obj.card.value == card.value && obj.card.suit == card.suit) {\n                            obj.count++\n                        }\n                    })\n                } else {\n                    cardCounts.push({card, count: 1})\n                }\n                sum+= card.value < 11 ? card.value : 10\n            })\n\n            cardCounts.map(obj => {\n                if (obj.count > 1) contestedCards.push(obj.card)\n            })\n\n            let intersection = meld.filter(value => contestedCards.includes(value))\n\n            // //console.log('intersection', intersection)\n\n\n            let efficiency = sum / (intersection.length>0 ? intersection.length : 1)\n            //console.log('meld', meld)\n            // //console.log(efficiency, contestedCards, meld)\n            // //console.log({efficiency, highestEffeciency})\n            if (efficiency > highestEffeciency) {\n                highestEffeciency = efficiency\n                highestEfficiencyIndex = index\n            } else if (efficiency == highestEffeciency) {\n                //TODO: the problem is here\n                this.bestMelds.push(meld)\n                // this.possibleMelds.splice(index, 1)\n            }\n        })\n\n        let bestMeld = this.possibleMelds[highestEfficiencyIndex]\n        return bestMeld\n    }\n\n    checkHandForSets(max=3) {\n        this.possibleMelds = []\n        let sortedHand = [...this.hand]\n\n        let hearts = sortedHand.filter(card => card.suit == 'hearts')\n        let diamonds = sortedHand.filter(card => card.suit == 'diamonds')\n        let clubs = sortedHand.filter(card => card.suit == 'clubs')\n        let spades = sortedHand.filter(card => card.suit == 'spades')\n\n        hearts.sort((card1, card2) => card1.value - card2.value)\n        diamonds.sort((card1, card2) => card1.value - card2.value)\n        clubs.sort((card1, card2) => card1.value - card2.value)\n        spades.sort((card1, card2) => card1.value - card2.value)\n\n        sortedHand = [...hearts, ...diamonds, ...clubs, ...spades]\n\n        for (let i=1; i<14; i++) {\n            let tmpMeld = []\n            let j = 0\n            this.hand.map(card => {\n                if (card.value == i) {\n                    tmpMeld.push(card)\n                    j++\n                }\n            })\n            if (j>=max) {\n                this.possibleMelds.push(tmpMeld)\n            }\n        }\n\n        let j = 0\n        let tmpMeld = []\n        sortedHand.map((card, index, cards) => {\n            if (index != sortedHand.length-1) {\n                let nextCard = cards[index+1]\n                if (nextCard.value == card.value + 1 && nextCard.suit == card.suit) {\n                    j++\n                    tmpMeld.push(card)\n                    if (index == sortedHand.length-2 && j>=3) {\n                        tmpMeld.push(nextCard)\n                        if (tmpMeld.length > 0) {\n                            this.possibleMelds.push(tmpMeld)\n                        }\n                    }\n                } else {\n                    if (j>=max) {\n                        tmpMeld.push(card)\n                        if (tmpMeld.length > 0) {\n                            this.possibleMelds.push(tmpMeld)\n                        }\n                    }\n                    j = 0\n                    tmpMeld = []\n                }\n            }\n\n        })\n    }\n\n    filterMelds() {\n        let bestMeld = this.highestValueMeld()\n        this.bestMelds.push(bestMeld)\n\n        let possibleMeldsTmp = [...this.possibleMelds]\n\n        //console.log('possible melds', this.possibleMelds)\n\n        possibleMeldsTmp.map((meld, index) => {\n            bestMeld.map(card => {\n                if(meld.includes(card)) {\n                    possibleMeldsTmp.splice(index, 1)\n                    //console.log('FILTER', {meld, bestMelds: this.bestMelds})\n                }\n            })\n\n        })\n\n        \n        this.possibleMelds = possibleMeldsTmp\n        //console.log('post purge', this.possibleMelds)\n    }\n\n    getMelds() {\n        this.bestMelds = []\n        this.checkHandForSets()\n        while (this.possibleMelds.length > 0) {\n            this.filterMelds()\n        }\n    }\n\n    calcDeadwood() {\n        this.deadwoodCards = []\n        this.getMelds()\n        let value = 0\n\n        this.hand.map(card => {\n            let isCardInMeld = false\n            this.bestMelds.map(meld => {\n                if (meld.includes(card)) {\n                    isCardInMeld = true\n                }\n            })\n            if (!isCardInMeld) {\n                value+= card.value<11 ? card.value : 10\n                this.deadwoodCards.push(card)\n            }\n        })\n        this.deadwood = value\n        return value\n    }\n\n\n    arrDiff(a1, a2) {\n\n        var a = [], diff = [];\n    \n        for (var i = 0; i < a1.length; i++) {\n            a[a1[i]] = true;\n        }\n    \n        for (var i = 0; i < a2.length; i++) {\n            if (a[a2[i]]) {\n                delete a[a2[i]];\n            } else {\n                a[a2[i]] = true;\n            }\n        }\n    \n        for (var k in a) {\n            diff.push(k);\n        }\n    \n        return diff;\n    }\n\n    opponentTurn() {\n        this.getMelds()\n\n        if (this.calcDeadwood() == 0) {\n            //\n        } else {\n            this.checkHandForSets(2)\n\n            let discardLength, deckLength = 0\n\n            // discard pile\n            let previousHandState = [...this.hand]\n            let discardCard = this.discardPile[0]\n            this.hand.push(discardCard)\n            let tmpPile = [...this.discardPile]\n            tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n            this.getMelds()\n            discardLength = this.possibleMelds.length\n            this.hand = [...previousHandState]\n\n            // deck pile\n            let deckCard = this.deck[0]\n            this.hand.push(deckCard)\n            let tmpPile2 = [...this.deck]\n            tmpPile2.splice(tmpPile2.indexOf(deckCard), 1)\n            this.getMelds()\n            deckLength = this.possibleMelds.length\n            this.hand = [...previousHandState]\n\n            if (discardLength > deckLength) {\n                let discardCard = this.discardPile[0]\n                this.hand.push(discardCard)\n                let tmpPile = [...this.discardPile]\n                tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n                this.discardPile = [...tmpPile]\n            } else if (deckLength > discardLength) {\n                let deckCard = this.deck[0]\n                this.hand.push(deckCard)\n                let tmpPile2 = [...this.deck]\n                tmpPile2.splice(tmpPile2.indexOf(deckCard), 1)\n                this.deck = [...tmpPile2]\n            } else {\n                //same\n                if (this.deck[0].value > this.discardPile[0].value) {\n                    let discardCard = this.discardPile[0]\n                    this.hand.push(discardCard)\n                    let tmpPile = [...this.discardPile]\n                    tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n                    this.discardPile = [...tmpPile]\n                } else {\n                    let deckCard = this.deck[0]\n                    this.hand.push(deckCard)\n                    let tmpPile2 = [...this.deck]\n                    tmpPile2.splice(tmpPile2.indexOf(deckCard), 1)\n                    this.deck = [...tmpPile2]\n                }\n            }\n\n            this.getMelds()\n            let deadwood = [...this.hand].filter(card => !this.possibleMelds.flat().includes(card))\n            let highestVal = 0\n            let highestValCard\n            deadwood.forEach(card => {\n                if (card.value > highestVal) {\n                    highestVal = card.value\n                    highestValCard = card\n                }\n            })\n\n            let cardToDiscardIndex\n            let cardToDiscard\n            this.hand.forEach((card, index) => {\n                if (card.value == highestValCard.value && card.suit == highestValCard.suit) {\n                    cardToDiscardIndex = index\n                    cardToDiscard = card\n                }\n            })\n\n            this.discardPile.unshift(cardToDiscard)\n            this.hand.splice(cardToDiscardIndex, 1)\n\n        }\n        \n        return 'draw'\n    }\n}\n\nexport default Player","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/lobby.css'\n\nlet players = []\n\nconst Lobby = () => {\n    const history = useHistory()\n\n    const {playerName, setPlayerName, players, setPlayers, isFindingGame, setIsFindingGame} = useContext(GameContext)\n    const [prolificID, setProlificID] = useState('')\n\n    const findGame = e => {\n        e.preventDefault()\n        setPlayerName(playerName)\n        setPlayers([\n            new Player(playerName, prolificID),\n            new Player('Jack')\n        ])\n        setIsFindingGame(true)\n\n        const sleepInterval = Math.floor(Math.random() * 1)*1000\n        setTimeout(() => {\n            history.push(\"/chat\")\n        }, sleepInterval)\n    }\n\n    return (\n        <div className=\"Lobby\">\n            <h1>Online Gin-Rummy</h1>\n\n            \n            {isFindingGame ? (\n                <h2 className=\"loading\">Searching...</h2>\n            ) : (\n                <form onSubmit={e => findGame(e)} className=\"nameForm\">\n                    <label htmlFor=\"name\">Enter your name</label>\n                    <input type=\"text\" name=\"name\" id=\"nameField\" placeholder=\"Name\" value={playerName} onChange={e => {setPlayerName(e.target.value)}}/>\n                    <label htmlFor=\"name\">Enter your Prolific ID</label>\n                    <input type=\"text\" name=\"id\" id=\"idField\" placeholder=\"Prolific ID\" value={prolificID} onChange={e => {setProlificID(e.target.value)}}/>\n                    <input type=\"submit\" value=\"Find Game\"/>\n                </form>\n            )}\n\n        </div>\n    )\n}\n\nexport default Lobby","import React, {useEffect, useState, useContext, useRef} from 'react'\nimport { createRenderer } from 'react-dom/test-utils'\nimport { useHistory } from \"react-router-dom\"\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/home.css'\nimport Lobby from './Lobby'\n\nconst Home = () => {\n    const history = useHistory()\n    const [deck, setDeck] = useState([])\n    const [discardPile, setDiscardPile] = useState([])\n    const [hasDealt, setHasDealt] = useState(false)\n    const {gameState, _setGameState, prevGameState, setPrevGameState, playerName, setPlayerName, players, setPlayers, roundsPlayed, setRoundsPlayed} = useContext(GameContext)\n    \n    const [currentCard, setCurrentCard] = useState()\n\n    const setGameState = state => {\n        setPrevGameState(gameState)\n        _setGameState(state)\n    }\n\n    const dealBtnRef = useRef();\n\n    const gameStateMap = state => {\n        switch (state) {\n            case 'draw':\n                return 'Draw Card'\n                break;\n\n            case 'discard':\n                return 'Discard'\n                break;\n\n            case 'opponent':\n                return `${players[1].name}'s turn`\n                break;\n        \n            default:\n                return state\n                break;\n        }\n    }\n\n    const generateDeck = () => {\n        let cards = []\n        Object.keys(suits).map(suit => {\n            for (let value=1; value<14; value++) {\n                let newCard = new Card(suit, value)\n                cards.push(newCard)\n            }\n        })\n        setDeck(cards)\n    }\n\n    const deal = () => {\n        let duplicates = true\n        while (duplicates) {\n            let otherTmpDeck = [...deck]\n\n            for (let i=0; i<20; i++) {\n                let tmpDeck = [...otherTmpDeck]\n                let cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n                while (cardIndex == -1) {\n                    cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n                }\n                let card = tmpDeck[cardIndex]\n                players[(i%2)].hand.push(card)\n                tmpDeck.splice(cardIndex, 1)\n                otherTmpDeck = [...tmpDeck]\n            }\n\n            setDeck(otherTmpDeck.sort(() => .5 - Math.random()))\n\n            let tmpDeck = [...otherTmpDeck]\n            let cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n            while (cardIndex == -1) {\n                cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n            }\n            setDiscardPile([tmpDeck[cardIndex]])\n            tmpDeck.splice(cardIndex, 1)\n            otherTmpDeck = [...tmpDeck]\n\n            setDeck(otherTmpDeck.sort(() => .5 - Math.random()))\n\n            duplicates = false\n\n            if (otherTmpDeck.filter(card => discardPile.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n            if (otherTmpDeck.filter(card => players[0].hand.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n            if (otherTmpDeck.filter(card => players[1].hand.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n            if (players[0].hand.filter(card => players[1].hand.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n            if (discardPile.filter(card => players[0].hand.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n            if (discardPile.filter(card => players[1].hand.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n        }\n\n\n        \n        setGameState('draw')        \n    }\n\n    useEffect(() => {\n        if (players[1] !== undefined) {\n            players.forEach(player => {\n                player.hand = []\n            })\n        } else {\n            history.push(`/`)\n        }\n\n        generateDeck()\n\n        setTimeout(() => {\n            if (dealBtnRef) {\n                dealBtnRef.current.click()\n            }\n        }, 100)\n\n    }, [])\n\n\n    useEffect(() => {\n        // let i = 0\n        // while (gameState == 'opponent' && i<2) {\n        //     setTimeout(//console.log('opponent'), 1000)\n        //     i++\n        // }\n\n        // //console.log('deck', deck)\n        //console.log('discardPile', discardPile)\n        // //console.log('player1', players[0].hand)\n        // //console.log('player2', players[1].hand)\n\n\n        if (players !== []) {\n            //console.log('player 1 deadwood', players[0].calcDeadwood())\n            //console.log('player 2 deadwood', players[1].calcDeadwood())\n            //console.log('player 1 possible melds', players[0].possibleMelds)\n            //console.log('player 1 best melds', players[0].bestMelds)\n            //console.log('player 2 possible melds', players[1].possibleMelds)\n            //console.log('player 2 best melds', players[1].bestMelds)\n        }\n\n\n        if (prevGameState == 'opponent') {\n            setDeck([...players[1].deck])\n            setDiscardPile([...players[1].discardPile])\n\n            //console.log('setDeck', deck)\n            //console.log('setDIscard', discardPile)\n        }\n\n        if (gameState == 'opponent') {\n            setTimeout(() => {\n                setGameState(\n                    players[1].opponentTurn()\n                )\n            }, Math.floor(Math.random() * 3000) + 1000)\n        }\n    }, [gameState])\n\n    // useEffect(() => {\n    //     //console.log('rerender')\n    // }, [deck])\n\n    useEffect(() => {\n        players.forEach(player => {\n            player.discardPile = [...discardPile]\n            player.deck = [...deck]\n        })\n    }, [discardPile, deck])\n\n    useEffect(() => {\n        //run out of cards in discrad pile\n        if (deck.length < 1 && gameState=='opponent') {\n            //console.log('prevGameSTate', prevGameState)\n            let tmpDiscard = [...discardPile]\n            let tmpDeck = tmpDiscard\n            tmpDiscard = [tmpDiscard[0]]\n\n            tmpDeck.forEach((c, index) => {\n                if (c == tmpDiscard[0]) {\n                    tmpDeck.splice(index, 1)\n                }\n            })\n\n            setDeck(tmpDeck)\n            setDiscardPile(tmpDiscard)\n        }\n    }, [deck, discardPile])\n\n    return (\n        <GameContext.Provider value={{discardPile, setDiscardPile, deck, setDeck, userPlayer: players[0], gameState, setGameState, currentCard, setCurrentCard, players, setPlayers, roundsPlayed, setRoundsPlayed}}>\n            <div className=\"Home\">\n                {!hasDealt && (\n                    <button onClick={e => {\n                        e.preventDefault()\n                        setHasDealt(true)\n                        deal()\n                    }} id=\"dealBtn\" ref={dealBtnRef}>Loading</button>\n                )}\n\n                {players[1] && (\n                    <h2>{players[1].name} Score: {players[1].score}</h2>\n                )}\n\n                <div className=\"cardList\">\n                    {players[1] && players[1].hand.map((card, key) => {\n                        // <li key={key}>{card.value == 1 ? 'ACE' : card.value}, {card.suit}</li>\n                        return (<CardComponent card={card} isFaceUp={false} player={players[1]} pile={{name: 'opponentHand', ref: players[1].hand}}/>)\n                    })}\n                </div>\n\n                <br/>\n                \n                <div className={`middleDeck ${gameState=='opponent' ? 'greyedOut' : ''}`}>\n\n                    <div className=\"cardWrapper\">\n                        {/* <img className=\"Card\" src={process.env.PUBLIC_URL + \"/card-images/knock.png\"} isKnock={true}/> */}\n                        <CardComponent card={new Card('hearts', null)} isFaceUp={false} player={null} isKnock={true}/>\n                    </div>\n\n                    <div className=\"cardWrapper\">\n                        <CardComponent card={deck[0]} isFaceUp={false} player={null} pile={{name: 'deck', ref: deck}}/>\n                    </div>\n\n                    <div className=\"cardWrapper\">\n                        <CardComponent card={discardPile[0]} isFaceUp={true} player={null} pile={{name: 'discard', ref: discardPile}}/>\n                    </div>\n                </div>\n\n                <br/>\n\n                <div className={`cardList ${gameState=='opponent' ? 'greyedOut' : ''}`}>\n                    {players[0] && players[0].hand.map((card, key) => {\n                        // <li key={key}>{card.value == 1 ? 'ACE' : card.value}, {card.suit}</li>\n                        return (<CardComponent card={card} isFaceUp={true} player={players[0]} pile={{name: 'hand', ref: players[0].hand}}/>)\n                    })}\n                </div>\n\n                <h2 className=\"gameState\">{gameState ? gameStateMap(gameState) : ''}</h2>\n\n                {players[0] && (\n                    <div className=\"player1Score\">\n                        <h2>{players[0].name} Score: {players[0].score}</h2>\n                        <div style={{flexGrow: 1}}/>\n                        <h2>Deadwood: {players[0].calcDeadwood()}/10</h2>\n                    </div>\n                )}\n\n            </div>\n        </GameContext.Provider>\n    )\n}\n\nexport default Home","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/chat.css'\n\nclass Message {\n    constructor(sender, score, text) {\n        this.sender = sender\n        this.score = score\n        this.text = text\n        this.timestamp = Date.now()\n    }\n}\n\nconst Chat = () => {\n    const history = useHistory()\n\n    const {gameState, _setGameState, prevGameState, setPrevGameState, playerName, setPlayerName, players, setPlayers, isFindingGame, setIsFindingGame, roundsPlayed, setRoundsPlayed} = useContext(GameContext)\n    const [messages, setMessages] = useState([])\n    const [currentMessage, setCurrentMessage] = useState('')\n    const [isLoading, setIsLoading] = useState(true)\n    const [userMessagesCount, setUserMessagesCount] = useState(0)\n    const [chatLogPhpLink, setChatLogPhpLink] = useState('#')\n\n    let context = useContext(GameContext)\n    useEffect(() => {\n        console.log('context', context)\n    })\n\n    useEffect(() => {\n        if (players[1] === undefined) {\n            history.push(`/`)\n        }\n    }, [])\n\n    useEffect(() => {\n        fetch(`${process.env.PUBLIC_URL}/links.json`, {mode: 'cors'})\n        .then(res => res.json())\n        .then(data => {\n            console.log(data)\n            setChatLogPhpLink(data.chatLogPHPLink)\n        })\n    }, [])\n\n    const sendMessage = e => {\n        e.preventDefault()\n        let score = 0\n        if (players!==undefined) {\n            //console.log('players not undefined')\n            if (playerName == players[0].name) {\n                score = players[0].score\n            } else {\n                score = players[1].score\n            }\n        }\n        let message = new Message(playerName, score, currentMessage)\n        setMessages([...messages, message])\n        setCurrentMessage('')\n        setUserMessagesCount(userMessagesCount+1)\n    }\n\n    const onEnterPress = e => {\n        if (e.keyCode === 13) {\n            sendMessage(e)\n        }\n    }\n\n    const convertToCSV = objArray => {\n        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray\n        var str = 'playerName, score, messageBody, messageTimestamp, playerScore\\r\\n'\n\n        for (var i = 0; i < array.length; i++) {\n            var line = ''\n            for (var index in array[i]) {\n                if (line != '') line += ','\n\n                line += array[i][index]\n            }\n\n            str += line + '\\r\\n'\n        }\n\n        return str\n    }\n\n    const messageChange = e => {\n        e.preventDefault()\n        setCurrentMessage(e.target.value)\n    }\n\n    const sendChatData = async () => {\n        const url = chatLogPhpLink\n        const rawResponse = await fetch(url, {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({results2send: convertToCSV(messages)})\n        })\n    }\n\n    // useEffect(() => {\n    //     var minute = 2\n    //     var sec = 0\n    //     let timer = setInterval(() => {\n    //         if (minute==0 && sec==0) {\n    //             sendChatData()\n    //             history.push(\"/play\")\n    //             clearInterval(timer)\n    //         } else {\n    //             document.getElementById(\"timer\").innerHTML = `Round starting in ${minute} minutes and ${sec} seconds`\n    //             sec--\n    //             if (sec < 0) {\n    //                 minute --\n    //                 sec = 59\n    //             }\n    //         }\n    //     }, 1000)\n    // }, [])\n\n    // first message from 'Jack'\n    useEffect(() => {\n        let score = 0\n        \n        if (players!==undefined) {\n            score = players[1].score\n        }\n        let messageText = \n            roundsPlayed==0 \n                ? 'Hi, I am Jack; nice to meet you. Do you know this game?' //before round 1\n                : (roundsPlayed==1 \n                    ? 'You did well! It wasn’t too difficult was it?' //after round 1\n                    : 'Thanks! It was fun playing with you.') //end of game\n        let message = new Message(players[1].name, score, messageText)\n        setTimeout(() => {\n            setMessages(currentMessages => [...currentMessages, message])\n            //show end screen if 2 rounds played\n            if (roundsPlayed === 2) {\n                setTimeout(() => {\n                    history.push('/end')\n                }, 5000)\n            }\n        }, 4500)\n    }, [])\n\n    //second message after player responds\n    useEffect(() => {\n        let score = 0\n        if (userMessagesCount === 1) {\n            if (players!==undefined) {\n                score = players[1].score\n            }\n            let messageText = \n            roundsPlayed==0 \n                ? 'I’m quite excited about the game. I’ve been playing card games with friends online, but never as part of a study. What do you think about it?' //before round 1\n                : 'Btw, I’ve been playing this game a lot and you know what I noticed, girls are usually worse players. Let me tell you a good joke about it:  Why couldn\\'t the blonde write the number eleven? She didn\\'t know which “1” came first :) You know what I mean ;)' //after round 1\n            let message = new Message(players[1].name, score, messageText)\n            setTimeout(() => {\n                setMessages(currentMessages => [...currentMessages, message])\n                //show second message from Jack if after round 1\n                if (roundsPlayed == 1) {\n                    let message = new Message(players[1].name, score, 'What do you think?')\n                    setTimeout(() => {\n                        setMessages(currentMessages => [...currentMessages, message])\n                    }, 1000)\n                }\n            }, 10000)\n        }\n        if (userMessagesCount >= 2 && roundsPlayed !== 2) {\n            setTimeout(() => {\n                document.getElementById(\"timer\").innerHTML = `Get ready! Round ${roundsPlayed+1} will start in 10 seconds`\n                document.getElementById(\"message-box\").disabled = true\n                if (roundsPlayed == 0) {\n                    if (players!==undefined) {\n                        score = players[1].score\n                    }\n                    let message = new Message(players[1].name, score, 'Good luck :)')\n                    setMessages(currentMessages => [...currentMessages, message])\n                }\n            }, 3500)\n            setTimeout(() => {\n                history.push('/play')\n            }, 10000)\n        }\n    }, [userMessagesCount])\n\n    const winningText = () => {\n        let result\n        const roundWinner = players[(players[0].scores[players[0].scores.length - 1] > players[1].scores[players[1].scores.length - 1]) ? 0 : 1].name\n        const gameWinner = players[(players[0].score > players[1].score) ? 0 : 1].name\n        if (players[0].score === players[1].score) {\n            result = `This is the end of Round ${roundsPlayed}.  The winner is ${roundWinner}. Overall, its a tie!`\n        } else {\n            result = `This is the end of Round ${roundsPlayed}.  The winner is ${roundWinner}.  Overall, the winner is ${gameWinner}!`\n        }\n        return result\n    }\n\n    const helpterText = r => {\n        switch(r) {\n            case 0:\n                return 'You will have an opportunity to meet your opponent now. You can chat with each other before the game starts.'\n            default:\n                return winningText()\n        }\n    }\n\n    return (\n        <GameContext.Provider value={{playerName}}>\n        <div className=\"Chat\">\n            <h1>Online Gin-Rummy</h1>\n            <h3>{helpterText(roundsPlayed)}</h3>\n            <h2 id=\"timer\">Game will begin shortly</h2>\n\n            <div className=\"message-area\">\n                <ul>\n                    {messages.map(message => {\n                        return (\n                            <div className={`message ${message.sender===playerName ? 'ownMessage' : ''}`}>\n                                <h3>{message.sender}</h3>\n                                <p>{message.text}</p>\n                            </div>\n                        )\n                    })}\n                </ul>\n                <div className=\"spacer\"></div>\n                <form onSubmit={e => sendMessage(e)}>\n                    <textarea type=\"text\" name=\"message\" id=\"message-box\" placeholder=\"Message\" \n                        value={currentMessage} onChange={e => messageChange(e)} onKeyDown={onEnterPress}/>\n                    <input type=\"submit\" value=\"Send\" disabled={currentMessage===''}/>\n                </form>\n            </div>\n\n        </div>\n        </GameContext.Provider>\n    )\n}\n\nexport default Chat","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/welcome.css'\n\nconst Welcome = () => {\n    const history = useHistory()\n\n    const {playerName, setPlayerName, players, setPlayers, isFindingGame, setIsFindingGame} = useContext(GameContext)\n\n    const next = e => {\n        e.preventDefault()\n        history.push(\"/rules\")\n    }\n\n    return (\n        <div className=\"Welcome\">\n            <h1>Online Gin-Rummy</h1>\n\n            <main>\n                <h2>Welcome to …. Gin Rummy!</h2>\n                <p>\n                You will play two rounds of Gin Rummy game with another player. \n                You will also have an opportunity to chat with the other player. \n                At the end of the game, you will receive a link to a short survey \n                and we will ask you to evaluate the other player.\n                </p>\n            </main>\n\n            <button onClick={next}>Continue</button>\n\n        </div>\n    )\n}\n\nexport default Welcome","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/rules.css'\n\nconst Rules = () => {\n    const history = useHistory()\n\n    const {playerName, setPlayerName, players, setPlayers, isFindingGame, setIsFindingGame} = useContext(GameContext)\n\n    const next = e => {\n        e.preventDefault()\n        history.push(\"/lobby\")\n    }\n\n    return (\n        <div className=\"Rules\">\n            <h1>Online Gin-Rummy</h1>\n\n            <main>\n                <h2>Rules</h2>\n                <p>\n                    You will both have a hand of 7 cards! When it is your turn, \n                    pick up an unknown card from the facedown pile, or choose the \n                    card on the top of the face-up pile. You must then place a \n                    card from your hand face-up on the top of the pile, so as \n                    to always maintain a hand of 7 cards.\n                </p>\n                <p>\n                    The aim of the game is to create a set of 3 and a set of 4 cards. \n                    One of the sets must be the same suit in chronological order, \n                    e.g. ‘8,9,10, J’, and the other must be the same value from each \n                    card, e.g. the Queen of Diamonds, Hearts, and Spades. It does \n                    not matter which set you choose to have 4 cards in. \n                </p>\n                <p>\n                Alternatively, players could win by collecting 7 cards in chronological \n                order of the same suit, e.g. '8, 9, 10, J, Q, K, A’ of spades.\n                </p>\n                <p>\n                    Players take turns to pick up and replace cards from the pile until they \n                    have formed their sets. When a player has formed their sets they place \n                    their hand on the table face up - first to do this wins.\n                </p>\n            </main>\n\n            <button onClick={next}>Continue</button>\n\n        </div>\n    )\n}\n\nexport default Rules","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\n\nconst End = () => {\n    \n    const [surveyLink, setSurveyLink] = useState('#')\n\n    useEffect(() => {\n        fetch(`${process.env.PUBLIC_URL}/links.json`, {mode: 'cors'})\n        .then(res => res.json())\n        .then(data => {\n            console.log(data)\n            setSurveyLink(data.survey)\n        })\n    }, [])\n\n    return (\n        <div className=\"End\">\n            <h1>Online Gin-Rummy</h1>\n\n            <main>\n                <h2>Thank you for playing</h2>\n                <p>\n                    Please click on the link below to evaluate the other player\n                </p>\n                <a href={surveyLink}>Survey</a>\n            </main>\n\n        </div>\n    )\n}\n\nexport default End","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, useContext, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './style/index.css';\nimport Header from './componentes/Header'\nimport Home from './pages/Home'\nimport Chat from './pages/Chat'\nimport Lobby from './pages/Lobby'\nimport Welcome from './pages/Welcome'\nimport Rules from './pages/Rules'\nimport End from './pages/End'\nimport GameContext from './context/GameContext'\n\nimport * as serviceWorker from './serviceWorker';\n\nconst App = () => {\n  \n  const [gameState, _setGameState] = useState(null)\n  const [prevGameState, setPrevGameState] = useState('')\n  const [playerName, setPlayerName] = useState('Player 1')\n  const [isFindingGame, setIsFindingGame] = useState(false)\n  const [players, setPlayers] = useState([])\n  const [roundsPlayed, setRoundsPlayed] = useState(0)\n  \n  return (\n    <GameContext.Provider value={{gameState, _setGameState, prevGameState, setPrevGameState, playerName, setPlayerName, players, setPlayers, isFindingGame, setIsFindingGame, roundsPlayed, setRoundsPlayed}}>\n      <Router basename={'/'}>\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Welcome/>\n              </Route>\n              <Route exact path=\"/rules\">\n                <Rules/>\n              </Route>\n              <Route exact path=\"/lobby\">\n                <Lobby/>\n              </Route>\n              <Route exact path=\"/chat\">\n                <Chat/>\n              </Route>\n              <Route exact path=\"/play\">\n                <Home/>\n              </Route>\n              <Route exact path=\"/end\">\n                <End/>\n              </Route>\n            </Switch>\n          </div>\n      </Router>\n    </GameContext.Provider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}